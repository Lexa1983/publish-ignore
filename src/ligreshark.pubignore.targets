<?xml version="1.0" encoding="utf-8"?>
<!-- 
  This file can be imported into a WAP to support ignoreing files to be publish
  via a .publishIgnore file.
  -->
<Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  
  
  <PropertyGroup>
    <ls-ExcludeFilesByPublishIgnoreDependsOn>
      $(ls-ExcludeFilesByPublishIgnoreDependsOn);
      ls-FindPubIgnoreFiles;
      ls-core-ExcludeFilesByPublishIgnore;
    </ls-ExcludeFilesByPublishIgnoreDependsOn>
  </PropertyGroup>
  
  <Target Name="ls-ExcludeFilesByPublishIgnore" DependsOnTargets="$(ls-ExcludeFilesByPublishIgnoreDependsOn)" />

  <Target Name="ls-FindPubIgnoreFiles">
    <!-- For now let's just read the root folder, later we can support .publishIgnore files is other folders -->
    <ItemGroup>
      <PubIgnoreFiles Include="$(MSBuildProjectDirectory)\.publishIgnore" Condition=" Exists('$(MSBuildProjectDirectory)\.publishIgnore') "/>
    </ItemGroup>
  </Target>
  
  <!--
  This target will be executed once per .publishIgnore file
  -->
  <PropertyGroup>
    <ls-core-ExcludeFilesByPublishIgnoreDependsOn>
      $(ls-core-ExcludeFilesByPublishIgnore);
      ls-FindPubIgnoreFiles;
    </ls-core-ExcludeFilesByPublishIgnoreDependsOn>
  </PropertyGroup>
  
  <Target Name="ls-core-ExcludeFilesByPublishIgnore" 
          Outputs="%(PubIgnoreFiles.Identity)" 
          DependsOnTargets="$(ls-core-ExcludeFilesByPublishIgnoreDependsOn)"
          BeforeTargets="ExcludeFilesFromPackage">
    <!-- Read the file and add the patterns to the ExcludeFromPackageFiles item -->

    <!-- 
    TODO: when supporting more than just the .publishIngore in the root we will
          need to prefix the lines from the file with the relative path.
    -->
    <ReadPublishIgnoreFile FilePath="%(PubIgnoreFiles.Identity)">
      <Output TaskParameter="LinesFromFile" ItemName="_ls-PubIgnore-LinesRead"/>
    </ReadPublishIgnoreFile>
    
    <!-- Populate the ExcludeFromPackageFiles item -->
    <Message Text="Adding the following patterns to ExcludeFromPackageFiles: %0a%0d    @(_ls-PubIgnore-LinesRead->'%(Identity,'%0a0d    ')')" />
    
    <ItemGroup>
      <ExcludeFromPackageFiles Include="%(_ls-PubIgnore-LinesRead.Identity)">
        <FromTarget>ls-PublishIgnore</FromTarget>
      </ExcludeFromPackageFiles>
    </ItemGroup>  
  </Target>
  
  <!-- Tasks defined below -->
  <PropertyGroup>
    <ls-DefineReadPublishIgnoreFileInline Condition =" '$(ls-DefineReadPublishIgnoreFileInline)' == '' ">true</ls-DefineReadPublishIgnoreFileInline>
  </PropertyGroup>
  <UsingTask TaskName="ReadPublishIgnoreFile" 
             TaskFactory="CodeTaskFactory" 
             Condition=" '$(ls-PublishIgnoreTaskPath)'=='true' "
             AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <FilePath ParameterType="System.String" Required="true"/>

      <!-- Outputs -->
      <LinesFromFile ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true"/>
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Collections.Generic" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
            // read the file line by line and exclude any lines which start with # or 
            //  just contain whitespace
            Log.LogMessage("Starting to read .publishignore file at [{0}]", this.FilePath);

            if (!File.Exists(FilePath)) {
                string msg = string.Format("Unable to find the .publishIgnore file at [{0}]",this.FilePath);
                Log.LogError(msg);
                return false;
            }

            // TODO: do this better
            string[] allLinesRaw = File.ReadAllLines(this.FilePath);

            List<ITaskItem> linesNotComments = new List<ITaskItem>();
            foreach(string line in allLinesRaw){
                if (string.IsNullOrEmpty(line))
                    continue;

                // trim the line and see if it starts with #
                string lineTrimmed = line.TrimStart();
                if (lineTrimmed.StartsWith("#"))
                    continue;

                // add it to the list to be returned
                linesNotComments.Add(new TaskItem(lineTrimmed));
            }

            this.LinesFromFile = linesNotComments.ToArray();

            Log.LogMessage("Finished reading .publishIgnore file at [{0}]. Found [{0}] lines which are not comments or blank.", this.FilePath, this.LinesFromFile.Length);

            return !Log.HasLoggedErrors;
            ]]>
      </Code>
    </Task>
  </UsingTask>


  <!-- 
  The section below is only needed for debugging.
  If un-commented it will take precedence over the inline task above.
  You should also set ls-DefineReadPublishIgnoreFileInline=false from the cmd line.
  -->  
  <PropertyGroup>
    <ls-PublishIgnoreTaskPath Condition=" '$(ls-PublishIgnoreTaskPath)'=='' ">$(MSBuildProjectDirectory)\PubIgnore.Tasks.dll</ls-PublishIgnoreTaskPath>
  </PropertyGroup>
  
  <UsingTask TaskName ="ReadPublishIgnoreFile" AssemblyFile="$(ls-PublishIgnoreTaskPath)" />
  
</Project>